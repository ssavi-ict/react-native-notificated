"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[507],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(t),m=o,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return t?i.createElement(d,r(r({ref:n},u),{},{components:t})):i.createElement(d,r({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5180:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return f}});var i=t(7462),o=t(3366),a=(t(7294),t(3905)),r=["components"],s={sidebar_position:5},l="\ud83e\udeb6 Custom examples",c={unversionedId:"examples/custom-examples",id:"examples/custom-examples",title:"\ud83e\udeb6 Custom examples",description:"Code has been already described step by step in the DEFAULT EXAMPLES section.",source:"@site/docs/examples/custom-examples.md",sourceDirName:"examples",slug:"/examples/custom-examples",permalink:"/react-native-notificated/docs/examples/custom-examples",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/custom-examples.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd8b\ufe0f Global types config examples",permalink:"/react-native-notificated/docs/examples/global-types-config-examples"},next:{title:"\ud83d\udd25 Redux example",permalink:"/react-native-notificated/docs/examples/redux-example"}},u=[{value:"Code",id:"code",children:[],level:2},{value:"Visualization of examples",id:"visualization-of-examples",children:[{value:"Success notification",id:"success-notification",children:[],level:3},{value:"Error notification",id:"error-notification",children:[],level:3},{value:"Warning notification",id:"warning-notification",children:[],level:3},{value:"Info notification",id:"info-notification",children:[],level:3}],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],p={toc:u};function f(e){var n=e.components,s=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-custom-examples"},"\ud83e\udeb6 Custom examples"),(0,a.kt)("br",null),(0,a.kt)("p",null,"Code has been already described step by step in the ",(0,a.kt)("a",{parentName:"p",href:"/react-native-notificated/docs/examples/default-examples"},"DEFAULT EXAMPLES")," section.",(0,a.kt)("br",null),"\nSo I think there is no use to do it here again.",(0,a.kt)("br",null),"\nHere we have only a few differences I need to mention, and they are minimal:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we use ",(0,a.kt)("inlineCode",{parentName:"li"},"modify()")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"remove()")," only if the ",(0,a.kt)("a",{parentName:"li",href:"/react-native-notificated/docs/examples/default-examples"},"DEFAULT EXAMPLES")," because their usage is limited, and the explanation there is all we need to know. We can remove notification, or modify it. So, we will not use them here and in the other examples. Because of the same reason we will not use ",(0,a.kt)("inlineCode",{parentName:"li"},"useState")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"useNotificationController")," here."),(0,a.kt)("li",{parentName:"ul"},"we filled the ",(0,a.kt)("inlineCode",{parentName:"li"},"style")," object in every notification. To read more about the single notification properties please go to the ",(0,a.kt)("a",{parentName:"li",href:"/react-native-notificated/docs/default-variants-config/props-config"},"SINGLE NOTIFICATION CONFIG")," section.",(0,a.kt)("br",null))),(0,a.kt)("p",null,"In fact that's the only differences between Default Examples and Custom Examples.",(0,a.kt)("br",null),"\nLet's take a look at the code and the visualisations then:"),(0,a.kt)("h2",{id:"code"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { SafeAreaView } from 'react-native'\nimport { styles } from './styles'\nimport { createNotifications } from 'react-native-notification'\nimport { SuccessButton } from '../components/basicExamples/SuccessButton'\nimport { ErrorButton } from '../components/basicExamples/ErrorButton'\nimport { WarningButton } from '../components/basicExamples/WarningButton'\nimport { InfoButton } from '../components/basicExamples/InfoButton'\n\nconst { useNotifications, NotificationsProvider } = createNotifications({\n  isNotch: true,\n})\n\nexport const SingleCustomCases = () => {\n  const { notify } = useNotifications()\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <NotificationsProvider />\n      <SuccessButton\n        onPress={() =>\n          notify('success', {\n            params: {\n              description: 'Task has been completed without any error ',\n              title: 'Action completed',\n              style: {\n                titleSize: 20,\n                descriptionSize: 14,\n                accentColor: '#7CFC00',\n                borderType: 'accent',\n                defaultIconType: 'monochromatic',\n                multiline: 2,\n              },\n            },\n          })\n        }\n      />\n      <ErrorButton\n        onPress={() =>\n          notify('error', {\n            params: {\n              description: 'This error may damage your system. ',\n              title: 'Integration error',\n              style: {\n                titleSize: 25,\n                titleColor: '#FF0000',\n                descriptionSize: 12,\n                accentColor: '#FF0000',\n                borderType: 'accent',\n                defaultIconType: 'no-icon',\n              },\n            },\n          })\n        }\n      />\n      <WarningButton\n        onPress={() =>\n          notify('warning', {\n            params: {\n              description:\n                'All the css styles are now inactive. You can fix that by setting new values in your example',\n              title: 'Warning',\n              style: {\n                defaultIconType: 'no-icon',\n                borderType: 'no-border',\n                multiline: 3,\n              },\n            },\n          })\n        }\n      />\n      <InfoButton\n        onPress={() =>\n          notify('info', {\n            params: {\n              description:\n                'This is where the toast text goes. This text have more than one line. If the multiline is set by default, only one line is visible. Depends on the number of lines, another text parts are visible. We can set even 100 lines. If the text takes only 1 line, then size of the notification will fit',\n              title: 'Info',\n              style: {\n                titleSize: 22,\n                titleColor: '#C71585',\n                leftIconSource: require('../../assets/custom-info-icon-2.png'),\n                multiline: 8,\n                accentColor: '#C71585',\n                borderWidth: 2,\n              },\n            },\n          })\n        }\n      />\n    </SafeAreaView>\n  )\n}\n\n")),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"visualization-of-examples"},"Visualization of examples"),(0,a.kt)("p",null,"Let's see the notifications we declared above:"),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"success-notification"},"Success notification"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Success",src:t(9143).Z})),(0,a.kt)("h3",{id:"error-notification"},"Error notification"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Error",src:t(8213).Z})),(0,a.kt)("h3",{id:"warning-notification"},"Warning notification"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Warning",src:t(4354).Z})),(0,a.kt)("h3",{id:"info-notification"},"Info notification"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Info",src:t(691).Z})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Like we can see every notification have its own style, but it's not going above this single notification. ",(0,a.kt)("br",null),"\nWhat we should remember is that the single notification style overwrites each of those configs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"globalConfig")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"successConfig")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"errorConfig")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"warningConfig")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"infoConfig"))),(0,a.kt)("p",null,"To read more please go to ",(0,a.kt)("a",{parentName:"p",href:"/react-native-notificated/docs/default-variants-config/props-config"},"SINGLE NOTIFICATION CONFIG")," and the ",(0,a.kt)("a",{parentName:"p",href:"/react-native-notificated/docs/comprehensive-configuration/order-of-settings-overwriting"},"ORDER OF SETTINGS OVERWRITING")," sections."))}f.isMDXComponent=!0},8213:function(e,n,t){n.Z=t.p+"assets/images/error-custom-41df2eb96a3a777409b1207642ce4c73.png"},691:function(e,n,t){n.Z=t.p+"assets/images/info-custom-1e034123bd95751712e9a7b0a1b2f0ca.png"},9143:function(e,n,t){n.Z=t.p+"assets/images/success-custom-801a088c6de2da9d6b8b6b213c7f583a.png"},4354:function(e,n,t){n.Z=t.p+"assets/images/warning-custom-ce62b9c0f3b54c8025e204cf0cd3f466.png"}}]);